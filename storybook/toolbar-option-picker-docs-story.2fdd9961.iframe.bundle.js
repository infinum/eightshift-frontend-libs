"use strict";(self.webpackChunk_eightshift_frontend_libs=self.webpackChunk_eightshift_frontend_libs||[]).push([[1203],{"./scripts/components/toolbar-option-picker/docs/story.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{component:()=>component,default:()=>story,toolbarGroup:()=>toolbarGroup,toolbarGroupInline:()=>toolbarGroupInline});__webpack_require__("./node_modules/react/index.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.array.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.array.find.js"),__webpack_require__("./node_modules/core-js/modules/es.array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.number.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-properties.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-own-property-descriptor.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-own-property-descriptors.js"),__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js");var toolbar_group=__webpack_require__("./node_modules/@wordpress/components/build-module/toolbar/toolbar-group/index.js"),dropdown_menu=__webpack_require__("./node_modules/@wordpress/components/build-module/dropdown-menu/index.js"),build_module=__webpack_require__("./node_modules/@wordpress/i18n/build-module/index.js"),icons=__webpack_require__("./scripts/editor/icons/icons.js"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:String(i)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var ToolbarOptionPicker=function ToolbarOptionPicker(_ref){var currentValue=_ref.value,onChange=_ref.onChange,options=_ref.options,controlLabel=_ref.label,_ref$screenReaderDesc=_ref.screenReaderDescription,describedBy=void 0===_ref$screenReaderDesc?(0,build_module.sprintf)((0,build_module.__)("Change %s"),controlLabel):_ref$screenReaderDesc,_ref$isInline=_ref.isInline,isCollapsed=void 0!==_ref$isInline&&_ref$isInline,_ref$isInToolbar=_ref.isInToolbar,isToolbar=void 0!==_ref$isInToolbar&&_ref$isInToolbar,_ref$isToolbarButton=_ref.isToolbarButton,isToolbarButton=void 0===_ref$isToolbarButton||_ref$isToolbarButton,_ref$popoverPosition=_ref.popoverPosition,popoverPosition=void 0===_ref$popoverPosition?"bottom right":_ref$popoverPosition,_ref$isToggleButtonAc=_ref.isToggleButtonActive,isToggleButtonActive=void 0!==_ref$isToggleButtonAc&&_ref$isToggleButtonAc,buttonIcon=_ref.buttonIcon,_ref$showToggleButton=_ref.showToggleButtonLabel,showToggleButtonLabel=void 0!==_ref$showToggleButton&&_ref$showToggleButton,_ref$unsetOnClick=_ref.unsetOnClick,unsetOnClick=void 0!==_ref$unsetOnClick&&_ref$unsetOnClick,_ref$disabled=_ref.disabled,disabled=void 0!==_ref$disabled&&_ref$disabled;function applyOrUnset(value){return unsetOnClick&&currentValue===value?function(){return onChange(void 0)}:function(){return onChange(value)}}var UIComponent=isToolbar?toolbar_group.A:dropdown_menu.A,extraProps=isToolbar?{isCollapsed:!isCollapsed}:{isToolbarButton};return(0,jsx_runtime.jsx)(UIComponent,_objectSpread({icon:function getIcon(){var _icons$options$0$icon;if(buttonIcon)return buttonIcon;var _icons$activeOption$i,activeOption=options.find((function(control){return control.value===currentValue}));return activeOption?null!==(_icons$activeOption$i=icons.Pt[activeOption.icon])&&void 0!==_icons$activeOption$i?_icons$activeOption$i:activeOption.icon:null!==(_icons$options$0$icon=icons.Pt[options[0].icon])&&void 0!==_icons$options$0$icon?_icons$options$0$icon:options[0].icon}(),label:controlLabel,text:showToggleButtonLabel?controlLabel:null,toggleProps:{describedBy,label:controlLabel,showTooltip:!0,isPressed:isToggleButtonActive,disabled},popoverProps:{position:popoverPosition,isAlternate:!0},controls:options.map((function(control){var _icons$icon,value=control.value,icon=control.icon,isActive=currentValue===value;return _objectSpread(_objectSpread({},control),{},{icon:null!==(_icons$icon=icons.Pt[icon])&&void 0!==_icons$icon?_icons$icon:icon,isActive,role:isCollapsed?"menuitemradio":void 0,onClick:applyOrUnset(value)})})),iconSize:24,className:"es-toolbar-icon-24"},extraProps))};ToolbarOptionPicker.displayName="ToolbarOptionPicker",ToolbarOptionPicker.__docgenInfo={description:"A flexible picker of mutually exclusive options.\n\n@deprecated since 8.0.0 - Use `OptionSelector` inside the block options instead.\n@see OptionSelector\n\n@param {object} props                                - ToolbarOptionPicker options.\n@param {object} props.value                          - Current value\n@param {function} props.onChange                     - Function called when the selection is changed.\n@param {array} props.options                         - Options to choose. Option should be in `{title: '', value: '', icon: ''}` format - `title` and  `value` are strings, `icon` is a JSX SVG component.\n@param {string?} props.label                         - Label describing the component (doesn't apply if in *inline* mode).\n@param {string} [props.screenReaderDescription]      - How the component is described by a screen reader, default format is *Change <label text>*.\n@param {boolean} [props.isInToolbar=false]           - If `true`, the component is rendered as a `ToolbarGroup`, otherwise it renders as a `DropdownMenu`.\n@param {boolean} [props.isInline=false]              - To be used with `isInToolbar`. If `true`, all options are shown inline, otherwise a button is shown that opens a dropdown option picker.\n@param {boolean} [props.isToolbarButton=true]        - Not compatible with `isInline`. If `true`, the button that opens a dropdown option picker is rendered as a `ToolbarButton`, rather than a `Button`.\n@param {string} [props.popoverPosition=bottom right] - Determines where the dropdown option picker is displayed relative to the button that opens it.\n@param {boolean} [props.isToggleButtonActive=false]  - If `true`, the button that opens a dropdown option picker is highlighted.\n@param {React.Component?} [props.buttonIcon]         - If set, the button that opens a dropdown option picker displays the set (JSX SVG) icon. Otherwise, the icon of the currently selected option (or first option if nothing selected) is used.\n@param {boolean} [props.showToggleButtonLabel=false] - If `true`, the text label is shown next to the icon of the button that opens a dropdown option picker.\n@param {boolean} [props.unsetOnClick=false] \t\t\t- If `true`, and you click a option that is currently selected, the value will be unset (set to `undefined`).\n@param {boolean} [props.disabled=false]              - If `true`, control is disabled.",methods:[],displayName:"ToolbarOptionPicker",props:{screenReaderDescription:{defaultValue:{value:"sprintf(__('Change %s'), controlLabel)",computed:!0},required:!1},isInline:{defaultValue:{value:"false",computed:!1},required:!1},isInToolbar:{defaultValue:{value:"false",computed:!1},required:!1},isToolbarButton:{defaultValue:{value:"true",computed:!1},required:!1},popoverPosition:{defaultValue:{value:"'bottom right'",computed:!1},required:!1},isToggleButtonActive:{defaultValue:{value:"false",computed:!1},required:!1},showToggleButtonLabel:{defaultValue:{value:"false",computed:!1},required:!1},unsetOnClick:{defaultValue:{value:"false",computed:!1},required:!1},disabled:{defaultValue:{value:"false",computed:!1},required:!1}}};const story={title:"Options/ToolbarOptionPicker"};var demoOptions=[{value:"top",title:"Align top",icon:"verticalAlignTop"},{value:"center",title:"Align center",icon:"verticalAlignCenter"},{value:"bottom",title:"Align bottom",icon:"verticalAlignBottom"}],component=function component(){return(0,jsx_runtime.jsx)(ToolbarOptionPicker,{value:"top",onChange:function onChange(value){return console.info(value)},isToolbarButton:!1,isInToolbar:!1,options:demoOptions,label:"Option label"})};component.displayName="component";var toolbarGroup=function toolbarGroup(){return(0,jsx_runtime.jsx)(ToolbarOptionPicker,{value:"top",onChange:function onChange(value){return console.info(value)},isToolbarButton:!0,isInToolbar:!0,options:demoOptions,label:"Option label"})};toolbarGroup.displayName="toolbarGroup";var toolbarGroupInline=function toolbarGroupInline(){return(0,jsx_runtime.jsx)(ToolbarOptionPicker,{value:"top",onChange:function onChange(value){return console.info(value)},isToolbarButton:!0,isInToolbar:!0,isInline:!0,options:demoOptions,label:"Option label"})};toolbarGroupInline.displayName="toolbarGroupInline",component.__docgenInfo={description:"",methods:[],displayName:"component"},toolbarGroup.__docgenInfo={description:"",methods:[],displayName:"toolbarGroup"},toolbarGroupInline.__docgenInfo={description:"",methods:[],displayName:"toolbarGroupInline"}}}]);